"""
Django settings for mysite project.
Generated by 'django-admin startproject' using Django 5.1.7.
"""

from pathlib import Path
import os
import socket

# Build paths inside the project
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-@=2jh*jwvj#7=oh+4+ae2)y9j4ixy@f4l^5sf-3iv$2elvp4y#'

# Determine if we're on the server or local development
# Check if we're on the server by checking hostname
hostname = socket.gethostname()
ON_SERVER = hostname == 'srv761360'  # Replace with your actual server hostname if different

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = not ON_SERVER  # True for local development, False on server

LOGIN_REDIRECT_URL = 'home'
LOGIN_URL = 'login'

SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # Store sessions in database
SESSION_COOKIE_AGE = 86400  # Keep users logged in for 1 day
SESSION_SAVE_EVERY_REQUEST = True  # Save session on every request
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # Keep session active after closing the browser
SESSION_COOKIE_SECURE = False  # Change to True if using HTTPS
SESSION_COOKIE_HTTPONLY = True  # Prevent JavaScript access to cookies
SESSION_COOKIE_SAMESITE = 'Lax'  # Prevent session issues with CSRF

ALLOWED_HOSTS = ["*"]  # Change this to your actual domain in production

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'whitenoise.runserver_nostatic',  # Ensures static files work in dev mode too
    'main',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Enables static file serving in production
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'

# Database configuration based on environment
if ON_SERVER:
    # Server configuration (MySQL)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': 'legal_system_db',
            'USER': 'legal_system_user',
            'PASSWORD': 'Password123',
            'HOST': 'localhost',
            'PORT': '3306',
            'OPTIONS': {
                'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
                'charset': 'utf8mb4',
            },
        }
    }
else:
    # Local development configuration (SQLite)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']  # Static files in development
STATIC_ROOT = BASE_DIR / 'staticfiles'  # Static files collected for production

# WhiteNoise settings (Compress and Cache static files)
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files (User uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Export Backup Configuration
# Define backup directories for exports
BACKUP_ROOT = os.path.join(BASE_DIR, 'backups')
EXPORT_BACKUP_DIR = os.path.join(BACKUP_ROOT, 'exports')

# Create backup directories if they don't exist
os.makedirs(EXPORT_BACKUP_DIR, exist_ok=True)
for format_type in ['excel', 'csv', 'pdf']:
    os.makedirs(os.path.join(EXPORT_BACKUP_DIR, format_type), exist_ok=True)

# Maximum number of backup files to keep per format (0 for unlimited)
MAX_BACKUPS_PER_FORMAT = 100  # Adjust based on your storage capacity

# Path to access the backups through a URL (for viewing in admin)
BACKUPS_URL = '/backups/'

# Analytics Dashboard Configuration
ANALYTICS_CONFIG = {
    'looker_studio_url': "https://lookerstudio.google.com/embed/reporting/your-report-id/page/your-page-id",
    'power_bi_url': "https://app.powerbi.com/reportEmbed?reportId=your-report-id&groupId=your-group-id",
}